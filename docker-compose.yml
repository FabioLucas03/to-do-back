version: '3'

services:
  frontend:
    build:
      context: ../to-do-app-next
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:3600/api
      dockerfile: Dockerfile
    ports:
      - "3500:3000"  # Mapeando porta 3500 externa para 3000 interna
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3600/api
    volumes:
      - ../to-do-app-next:/app
      - /app/node_modules
      - /app/.next
    restart: always
    networks:
      - app-network

  backend:
    build:
      context: .
    ports:
      - "3600:3000"  # Mapeando porta 3600 externa para 3000 interna
    depends_on:
      - database
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/tododb
      - PORT=3000
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  database:
    image: postgres:14
    ports:
      - "5434:5432"  # Changed from 5433 to 5434 to avoid conflict
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tododb
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

# Using named volumes instead of host path to avoid permission issues
volumes:
  postgres_data:
    driver: local
